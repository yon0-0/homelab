version: '3'

services:
  traefik:
    image: traefik:v3.2
    hostname: '{{.Node.Hostname}}'
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host

#Expose the metrics port
      - target: 1138
        published: 1138
        protocol: tcp
        mode: host

    networks:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /.../letsencrypt/acme.json:/letsencrypt/acme.json
    environment:
      # Cloudflare API credentials
      - CF_API_EMAIL= #Cloudflare API email
      - CF_DNS_API_TOKEN= #Cloudflare API token
    command:
 # API and logs
      - --api.dashboard=true
      - --log.level=DEBUG #changed from INFO to DEBUG
      - --accesslog=true

# Providers
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.swarm.network=proxy

# Entry points and redirection
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.certresolver=myresolver

 # Certificates resolver with Cloudflare DNS challenge
      - --certificatesresolvers.myresolver.acme.email= #acme email
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.myresolver.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.myresolver.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53

#Allow metrics for prometheus
      - --entrypoints.metrics.address=:1138 #metrics entrypoint
      - --metrics.prometheus=true #enable prometheus metrics
      - --metrics.prometheus.entryPoint=metrics #link prometheus to 'metrics' entrypoint
      - --metrics.prometheus.addEntryPointsLabels=true

    deploy:
      mode: global
      placement:
       constraints:
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.http.routers.mydashboard.rule=Host(`traefik.yourdomain.com`)
        - traefik.http.routers.mydashboard.service=api@internal
        - traefik.http.routers.mydashboard.middlewares=myauth,ipallowlist
        - traefik.http.services.mydashboard.loadbalancer.server.port=1337
        - traefik.http.middlewares.myauth.basicauth.users= #htpasswd 
        - traefik.http.middlewares.ipallowlist.ipwhitelist.sourceRange= #(allowed networks)

#whoami container
  whoami:
    image: traefik/whoami:v1.10
    hostname: '{{.Node.Hostname}}'
    networks:
      - proxy
    deploy:
      mode: global
      labels:
        - traefik.enable=true
        - traefik.http.routers.whoami.rule=Host(`whoami.yourdomain.com`)
        - traefik.http.services.whoami.loadbalancer.server.port=80

networks:
  proxy:
    external: true

volumes:
  letsencrypt:
    name: letsencrypt
